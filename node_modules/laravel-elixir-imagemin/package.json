{
  "name": "laravel-elixir-imagemin",
  "version": "0.1.6",
  "description": "Laravel Elixir wrapper around imagemin Gulp task.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "gulp",
    "laravel",
    "elixir",
    "imagemin"
  ],
  "author": {
    "name": "Nathan Macnamara"
  },
  "license": "MIT",
  "homepage": "https://github.com/nathanmac/laravel-elixir-imagemin",
  "bugs": {
    "url": "https://github.com/nathanmac/laravel-elixir-imagemin/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nathanmac/laravel-elixir-imagemin"
  },
  "dependencies": {
    "gulp-imagemin": "^1.2.0",
    "imagemin-pngquant": "^4.0.0",
    "gulp-notify": "^2.0.0",
    "underscore": "^1.7.0"
  },
  "readme": "# laravel-elixir-imagemin\n\nThis is a simple imagemin wrapper around Laravel Elixir. Add it to your Elixir-enhanced Gulpfile, like so:\n\n## Install\n\n```\nnpm install --save-dev laravel-elixir-imagemin\n```\n\n## Usage\n\n### Example *Gulpfile*:\n\n```javascript\nvar elixir = require('laravel-elixir');\n\nrequire('laravel-elixir-imagemin');\n\nelixir(function(mix) {\n   mix.imagemin();\n});\n```\n\nThis will scan your `resources/assets/img` directory for all image files. Instead, if you only want to process a single image, you may do:\n\n```javascript\nmix.imagemin(\"bootstrap.png\");\n```\n\nFinally, if you'd like to output to a different directory than the default public/css, then you may override this as well.\n\n```javascript\nmix.imagemin(\"bootstrap.png\", \"public/img/foo/bar/\");\n```\n\n#### Advanced example\n\nIn third argument you could pass imagemin options.\n\n```javascript\nmix.imagemin(\"bootstrap.png\", \"public/img\", { optimizationLevel: 3, progressive: true, interlaced: true });\n```",
  "readmeFilename": "readme.md",
  "_id": "laravel-elixir-imagemin@0.1.6",
  "_from": "laravel-elixir-imagemin@"
}
